# https://www.youtube.com/watch?v=vt33Hp-4RXg

# Vim workspace
function vw {
  du -a ~/workspace/* | awk '{print $2}' | fzf | xargs -o $EDITOR
}

# Vim here
function vh {
  fzf | xargs -o -I % $EDITOR % ;
}

function rails_version {
  rails -v | sed 's/Rails //'
}

function gpr() {
  github_url=$(git remote -v | awk '/fetch/{print $2}' | sed -Ee 's#(git@|git://)#https://#' -e 's@com:@com/@' -e 's%\.git$%%' | awk '/github/');
  branch_name=$(git symbolic-ref --short HEAD)
  repo=$(echo "$github_url" | sed -E 's#https://github.com/##')

  owner=$(echo "$repo" | cut -d'/' -f 1)

  head_filter="$owner:$branch_name"

  pr_url=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$repo/pulls?head=$head_filter" | grep '"html_url":' | head -n 1 | awk -F '"' '{print $4}')

  if [ -n "$pr_url" ]; then
    firefox "$pr_url/files"
  else
    firefox "$github_url"
  fi
}

# https://unix.stackexchange.com/a/109190
# TODO: alias not functions are working in shortcuts
function change_audio {
  current_output=`pacmd list-cards | grep "active profile" | cut -d ' ' -f 3-`

  if [ $current_output = "<output:hdmi-stereo>" ];
  then
      pacmd set-card-profile 0 output:analog-stereo
  else
      pacmd set-card-profile 0 output:hdmi-stereo
  fi
}

# After an update microphone was not working
fix_audio() {
  echo "üîß Reiniciando PulseAudio..."
  pulseaudio -k
  sleep 1
  pulseaudio --start

  echo "üîÑ Recargando ALSA (si est√° disponible)..."
  if command -v sudo >/dev/null && [ -w /etc/modprobe.d ]; then
  sudo alsa force-reload
  fi

  echo "üéö Ajustando perfil de tarjeta y volumen de micr√≥fono..."
  pactl set-card-profile 0 output:analog-stereo+input:analog-stereo 2>/dev/null
  pactl set-source-volume @DEFAULT_SOURCE@ 100% 2>/dev/null

  echo "‚úÖ ¬°Micr√≥fono y audio restaurados!"
}
# function fix_microphone() {
#   pactl load-module module-alsa-source device=hw:0,0
# }

function iacommit() {
  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "No est√°s dentro de un repositorio Git."
    return 1
  fi

  # Obtener cambios staged y no staged
  local changes=$(git diff --staged --no-color && git diff --no-color)

  if [[ -z "$changes" ]]; then
    echo "No hay cambios preparados para commit."
    return 1
  fi

  local prompt="Generate a concise and descriptive commit message the following changes:\n\n$changes"
  local commit_message=$(ask_openai "gpt-4o-mini" "$prompt" 60)

  if [[ -z "$commit_message" || "$commit_message" == "null" ]]; then
    echo "No se pudo generar el mensaje de commit."
    return 1
  fi

  # Mostrar el mensaje de commit y confirmar
  echo "Mensaje de commit generado:"
  echo "$commit_message"
  echo "¬øConfirmar el commit? (s/n)"
  read confirm

  if [[ "$confirm" == "s" || "$confirm" == "S" ]]; then
    # Sanitize commit message: remove code fences and unwanted control characters (except newline)
    local clean_message
    clean_message=$(printf "%s\n" "$commit_message" \
      | sed '/^```/d' \
      | tr -d '\000-\011\013-\037')
    # Use a temporary file to handle multi-line messages safely
    local tmpfile
    tmpfile=$(mktemp)
    printf "%s\n" "$clean_message" > "$tmpfile"
    git commit -a -F "$tmpfile"
    rm -f "$tmpfile"
  else
    echo "Commit cancelado."
  fi
}

function ask_openai() {
  local model="$1"
  local prompt="$2"
  local max_tokens="$3"

  if [[ -z "${OPENAI_API_KEY}" ]]; then
    echo "Error: La variable OPENAI_API_KEY no est√° definida."
    return 1
  fi

  local json_payload
  json_payload=$(printf '%s' "$prompt" | jq -Rs --arg model "$model" --argjson max_tokens "$max_tokens" \
    '{
      model: $model,
      messages: [{role: "user", content: .}],
      max_tokens: $max_tokens
    }')

  local response=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer ${OPENAI_API_KEY}" \
    -d "$json_payload")

  if [[ $(printf '%s' "$response" | jq -r '.error') != "null" ]]; then
    echo "Error en la API de OpenAI:"
    printf '%s' "$response" | jq -r '.error.message'
    return 1
  fi

  printf '%s' "$response" | jq -r '.choices[0].message.content'
}

function fix_wifi() {
  local iface="wlo1"
  local my_ip=$(ip -4 addr show $iface | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
  local current_gw=$(ip route | grep default | awk '{print $3}')

  if [[ -z "$my_ip" || -z "$current_gw" ]]; then
    echo "‚ùå No se detect√≥ IP o gateway en $iface. ¬øEst√°s conectado?"
    return 1
  fi

  local my_net_prefix="${my_ip%.*}"
  local gw_prefix="${current_gw%.*}"
  local reconnect=false

  echo "üì° IP: $my_ip"
  echo "üåê Gateway detectado: $current_gw"

  if [[ "$my_net_prefix" != "$gw_prefix" ]]; then
    echo "‚ö†Ô∏è Gateway y red no coinciden. Corrigiendo ruta..."
    sudo ip route del default
    sudo ip route add default via "$my_net_prefix.1" dev "$iface"
    reconnect=true
    echo "‚úÖ Ruta actualizada a $my_net_prefix.1"
  else
    echo "‚úÖ Gateway est√° en el rango correcto. Probando conectividad..."
    if ping -c 1 -W 1 "$current_gw" > /dev/null; then
      echo "‚úÖ Todo en orden. No se requiere acci√≥n."
    else
      echo "‚ö†Ô∏è Gateway $current_gw no responde. Forzando actualizaci√≥n..."
      sudo ip route del default
      sudo ip route add default via "$current_gw" dev "$iface"
      reconnect=true
      echo "‚úÖ Ruta actualizada con el gateway detectado ($current_gw)"
    fi
  fi

  if [[ "$reconnect" == true ]]; then
    echo "üîÅ Reiniciando conexi√≥n WiFi $iface..."
    nmcli dev disconnect "$iface"
    sleep 2
    nmcli dev connect "$iface"
    echo "‚úÖ Conexi√≥n reiniciada."
  fi
}
