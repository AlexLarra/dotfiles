# https://www.youtube.com/watch?v=vt33Hp-4RXg

# Vim workspace
function vw {
  du -a ~/workspace/* | awk '{print $2}' | fzf | xargs -o $EDITOR
}

# Vim here
function vh {
  fzf | xargs -o -I % $EDITOR % ;
}

function rails_version {
  rails -v | sed 's/Rails //'
}

function gpr() {
  github_url=$(git remote -v | awk '/fetch/{print $2}' | sed -Ee 's#(git@|git://)#https://#' -e 's@com:@com/@' -e 's%\.git$%%' | awk '/github/');
  branch_name=$(git symbolic-ref --short HEAD)
  repo=$(echo "$github_url" | sed -E 's#https://github.com/##')

  owner=$(echo "$repo" | cut -d'/' -f 1)

  head_filter="$owner:$branch_name"

  pr_url=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$repo/pulls?head=$head_filter" | grep '"html_url":' | head -n 1 | awk -F '"' '{print $4}')

  if [ -n "$pr_url" ]; then
    firefox "$pr_url/files"
  else
    firefox "$github_url"
  fi
}

# https://unix.stackexchange.com/a/109190
# TODO: alias not functions are working in shortcuts
function change_audio {
  current_output=`pacmd list-cards | grep "active profile" | cut -d ' ' -f 3-`

  if [ $current_output = "<output:hdmi-stereo>" ];
  then
      pacmd set-card-profile 0 output:analog-stereo
  else
      pacmd set-card-profile 0 output:hdmi-stereo
  fi
}

# After an update microphone was not working
function fix_microphone() {
  pactl load-module module-alsa-source device=hw:0,0
}

function iacommit() {
  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "No estás dentro de un repositorio Git."
    return 1
  fi

  # Obtener cambios staged y no staged
  local changes=$(git diff --staged --no-color && git diff --no-color)

  if [[ -z "$changes" ]]; then
    echo "No hay cambios preparados para commit."
    return 1
  fi

  local prompt="Generate a concise and descriptive commit message the following changes:\n\n$changes"
  local commit_message=$(ask_openai "gpt-4o-mini" "$prompt" 60)

  if [[ -z "$commit_message" || "$commit_message" == "null" ]]; then
    echo "No se pudo generar el mensaje de commit."
    return 1
  fi

  # Mostrar el mensaje de commit y confirmar
  echo "Mensaje de commit generado:"
  echo "$commit_message"
  echo "¿Confirmar el commit? (s/n)"
  read confirm

  if [[ "$confirm" == "s" || "$confirm" == "S" ]]; then
    # Sanitize commit message: remove code fences and unwanted control characters (except newline)
    local clean_message
    clean_message=$(printf "%s\n" "$commit_message" \
      | sed '/^```/d' \
      | tr -d '\000-\011\013-\037')
    # Use a temporary file to handle multi-line messages safely
    local tmpfile
    tmpfile=$(mktemp)
    printf "%s\n" "$clean_message" > "$tmpfile"
    git commit -a -F "$tmpfile"
    rm -f "$tmpfile"
  else
    echo "Commit cancelado."
  fi
}

function ask_openai() {
  local model="$1"
  local prompt="$2"
  local max_tokens="$3"

  if [[ -z "${OPENAI_API_KEY}" ]]; then
    echo "Error: La variable OPENAI_API_KEY no está definida."
    return 1
  fi

  local json_payload
  json_payload=$(printf '%s' "$prompt" | jq -Rs --arg model "$model" --argjson max_tokens "$max_tokens" \
    '{
      model: $model,
      messages: [{role: "user", content: .}],
      max_tokens: $max_tokens
    }')

  local response=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer ${OPENAI_API_KEY}" \
    -d "$json_payload")

  if [[ $(printf '%s' "$response" | jq -r '.error') != "null" ]]; then
    echo "Error en la API de OpenAI:"
    printf '%s' "$response" | jq -r '.error.message'
    return 1
  fi

  printf '%s' "$response" | jq -r '.choices[0].message.content'
}
